PHTTP69.89.76.82"Ï
GET /payday.js HTTP/1.1
!Host: service.rapidpaytoday.com
Connection: keep-alive
Accept: */*
vUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36
!Referer: http://www.4dsply.com/
$Accept-Encoding: gzip,deflate,sdch
!Accept-Language: en-US,en;q=0.8

*Þ®
HTTP/1.1 200 OK
Content-Length: 22077
(Content-Type: application/x-javascript
.Last-Modified: Thu, 27 Dec 2012 11:53:38 GMT
Accept-Ranges: bytes
ETag: "fd8014cf28e4cd1:14f6"
Server: Microsoft-IIS/6.0
X-Powered-By: ASP.NET
%Date: Tue, 08 Apr 2014 21:24:57 GMT
¿¬
ï»¿/* JSON helper */
if (!this.JSON) { JSON = {} } (function () { function f(n) { return n < 10 ? '0' + n : n } if (typeof Date.prototype.toJSON !== 'function') { Date.prototype.toJSON = function (key) { return this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) { return this.valueOf() } } var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { '\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"': '\\"', '\\': '\\\\' }, rep; function quote(string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { var c = meta[a]; return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4) }) + '"' : '"' + string + '"' } function str(key, holder) { var i, k, v, length, mind = gap, partial, value = holder[key]; if (value && typeof value === 'object' && typeof value.toJSON === 'function') { value = value.toJSON(key) } if (typeof rep === 'function') { value = rep.call(holder, key, value) } switch (typeof value) { case 'string': return quote(value); case 'number': return isFinite(value) ? String(value) : 'null'; case 'boolean': case 'null': return String(value); case 'object': if (!value) { return 'null' } gap += indent; partial = []; if (Object.prototype.toString.apply(value) === '[object Array]') { length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || 'null' } v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']'; gap = mind; return v } if (rep && typeof rep === 'object') { length = rep.length; for (i = 0; i < length; i += 1) { k = rep[i]; if (typeof k === 'string') { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v) } } } } else { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v) } } } } v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}'; gap = mind; return v } } if (typeof JSON.stringify !== 'function') { JSON.stringify = function (value, replacer, space) { var i; gap = ''; indent = ''; if (typeof space === 'number') { for (i = 0; i < space; i += 1) { indent += ' ' } } else if (typeof space === 'string') { indent = space } rep = replacer; if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) { throw new Error('JSON.stringify'); } return str('', { '': value }) } } if (typeof JSON.parse !== 'function') { JSON.parse = function (text, reviver) { var j; function walk(holder, key) { var k, v, value = holder[key]; if (value && typeof value === 'object') { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v } else { delete value[k] } } } } return reviver.call(holder, key, value) } cx.lastIndex = 0; if (cx.test(text)) { text = text.replace(cx, function (a) { return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4) }) } if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) { j = eval('(' + text + ')'); return typeof reviver === 'function' ? walk({ '': j }, '') : j } throw new SyntaxError('JSON.parse'); } } })();

/* jquery request plugin */
(function ($) {
    //get all query string parameters
    $.QueryString = (function (a) {
        if (a == "") return {};
        var b = {};
        for (var i = 0; i < a.length; ++i) {
            var p = a[i].split('=');
            if (p.length != 2) continue;
            var key = p[0].toLowerCase();
            var value = decodeURIComponent(p[1].replace(/\+/g, " "));
            b[key] = value;
        }
        return b;
    })(window.location.search.substr(1).split('&'))

    $.getQueryStringValue = function (qs) {
        var val = $.QueryString[qs];
        if (Utils.isDefine(val)) {
            return val;
        }
        return "";
    };

    $.addValueToUrl = function (src, key, value) {
        if (key != "" /*&& value != ""*/) {
            if (src.indexOf("?") < 0) {
                src += "?";
            }
            else {
                src += "&";
            }
            src += key + "=" + encodeURIComponent(value);
        }
        return src;
    };

    $.addValuesToUrl = function (src, values) {
        for (var value in values) {
            src = $.addValueToUrl(src, value, values[value]);
        }
        return src;
    };

    $.addQueryStringValues = function (src, arr) {
        for (var i = 0; i < arr.length; i++) {
            var key = arr[i].toLowerCase();
            var value = $.getQueryStringValue(key);
            if (!value.isNullOrEmpty()) {
                src = $.addValueToUrl(src, key, value);
            }
        }
        return src;
    };

    // get current page url with query string paremeters
    // a - query string parameters
    $.getUrl = (function (a) {
        if (a == undefined) a = {};
        var h = $.PageUrl;
        var par = $.param(a);
        if (par != "") h += "?" + par;
        return h;
    })

    //get current page url without query string parameters
    $.PageUrl = window.location.href.split('?')[0]

    //get request host
    $.Host = (function () {
        var h = "";
        var seg = $.PageUrl.split('/');
        $.each(seg, function (i, l) {
            if (i < $(seg).size() - 1) {
                h += seg[i] + "/";
            }
        });
        return h;
    })("")

    $.getPageUrl = (function (p) { return $.Host + p; })
})(jQuery);

var Helper = function () {
};

var Utils = new Helper();

Helper.prototype.Wait = function(msecs) {
    var start = new Date().getTime();
    var cur = start
    while (cur - start < msecs) {
        cur = new Date().getTime();
    }
} 

Helper.prototype.isDefine = function (o) {
    if (o != undefined && o != "undefined") {
        return true;
    }
    return false;
};


Helper.prototype.isNotNull = function (o) {
    if (o != null) {
        return true;
    }
    return false;
};

String.prototype.isNullOrEmpty = function () {
    if (Utils.isDefine(this) && Utils.isNotNull(this) && this != "") {
        return false;
    }
    return true;
};

String.prototype.toInt = function () {
    var pi = null;
    if (!this.isNullOrEmpty()) {
        try {
            pi = parseInt(this);
        } catch (e) { }
    }

    return pi;
};

String.prototype.toBool = function () {
    if (!this.isNullOrEmpty()) {
        if (this == "true") {
            return true;
        }
        if (this == "false") {
            return false;
        }
    }
    return null;
};

String.prototype.toDate = function () {
    var dt = null;
    if (!this.isNullOrEmpty()) {
        try {
            dt = Date.parse(this, "yyyy-mm-dd");
        } catch (e) { }
    }

    return dt;
};

var FieldType = { String: 1, Integer: 2, Boolean: 3, DateTime: 4 };

var DecisionStatus = { DECLINED: 0, APPROVED: 1 };

/* payday object */
var PayDayObject = function (websiteid) {
    this.fields = [{ type: FieldType.String, field: "sub_id" },
                   { type: FieldType.String, field: "state" },
                   { type: FieldType.String, field: "first_name" },
                   { type: FieldType.String, field: "last_name" },
                   { type: FieldType.String, field: "email" },
                   { type: FieldType.String, field: "home_phone" },
                   { type: FieldType.String, field: "zip" },
                   { type: FieldType.String, field: "address" },
                   { type: FieldType.String, field: "city" },
                   { type: FieldType.String, field: "housing" },
                   { type: FieldType.String, field: "best_time_to_call" },
                   { type: FieldType.String, field: "account_type" },
                   { type: FieldType.String, field: "pay_period" },
                   { type: FieldType.String, field: "income_type" },
                   { type: FieldType.String, field: "occupation" },
                   { type: FieldType.String, field: "employer" },
                   { type: FieldType.String, field: "empaddr" },
                   { type: FieldType.String, field: "empcity" },
                   { type: FieldType.String, field: "empstate" },
                   { type: FieldType.String, field: "empzip" },
                   { type: FieldType.String, field: "supervisor_name" },
                   { type: FieldType.String, field: "supervisor_phone" },
                   { type: FieldType.String, field: "work_phone", alternate_fields: { list: ["work_phone_1", "work_phone_2", "work_phone_3"], concat_symbol: ""} },
                   { type: FieldType.String, field: "bank_name" },
                   { type: FieldType.String, field: "account_number" },
                   { type: FieldType.String, field: "routing_number" },
                   { type: FieldType.String, field: "bank_phone" },
                   { type: FieldType.String, field: "driving_license_state" },
                   { type: FieldType.String, field: "driving_license_number" },
                   { type: FieldType.String, field: "mother_maiden_name" },
                   { type: FieldType.String, field: "social_security_number", alternate_fields: { list: ["social_security_number_1", "social_security_number_2", "social_security_number_3"], concat_symbol: ""} },
                   { type: FieldType.String, field: "reference_1_first_name" },
                   { type: FieldType.String, field: "reference_1_last_name" },
                   { type: FieldType.String, field: "reference_1_relationship" },
                   { type: FieldType.String, field: "reference_1_phone" },
                   { type: FieldType.String, field: "reference_2_first_name" },
                   { type: FieldType.String, field: "reference_2_last_name" },
                   { type: FieldType.String, field: "reference_2_relationship" },
                   { type: FieldType.String, field: "reference_2_phone" },
                   { type: FieldType.String, field: "marital_status" },
                   { type: FieldType.String, field: "employment_status" },
                   { type: FieldType.String, field: "education_level" },

                   { type: FieldType.Integer, field: "monthly_income" },
                   { type: FieldType.Integer, field: "requested_loan_amount" },
                   { type: FieldType.Integer, field: "months_at_residence" },
                   { type: FieldType.Integer, field: "months_employed" },
                   { type: FieldType.Integer, field: "months_with_bank" },

                   { type: FieldType.Boolean, field: "working_in_us" },
                   { type: FieldType.Boolean, field: "direct_deposit" },
                   { type: FieldType.Boolean, field: "active_military" },
                   { type: FieldType.Boolean, field: "citizen" },
                   { type: FieldType.Boolean, field: "ca_agree" },

                   { type: FieldType.String, field: "next_pay_date", alternate_fields: { list: ["next_pay_date_1", "next_pay_date_2", "next_pay_date_3"], concat_symbol: "-"} },
                   { type: FieldType.String, field: "second_pay_date" },
                   { type: FieldType.String, field: "birth_date" }
                 ];
    this.serviceURL = "http://service.rapidpaytoday.com/LeadScanner.svc";
    this.website_id = websiteid;
};

PayDayObject.prototype.getPageData = function () {
    var data = {};

    data["website_id"] = this.website_id;

    for (var i = 0; i < this.fields.length; i++) {
        var field = this.fields[i]['field'];
        var type = this.fields[i]['type'];
        var altFields = this.fields[i]['alternate_fields'];


        var value = "";

        var jqVal = $("#" + field).val();
        var qsVal = $.QueryString[field];

        if (Utils.isDefine(jqVal)) {
            value = jqVal;
        }
        if (Utils.isDefine(qsVal)) {
            value = qsVal;
        }

        if (!Utils.isDefine(jqVal) && !Utils.isDefine(qsVal) && Utils.isDefine(altFields)) {
            var altList = altFields["list"];
            var altVal = "";
            var defVal = 0;
            for (var j = 0; j < altList.length; j++) {
                var jqAltVal = $("#" + altList[j]).val();
                if (Utils.isDefine(jqAltVal) && !jqAltVal.isNullOrEmpty()) {
                    defVal++;
                    altVal += jqAltVal;
                    if (j < altList.length - 1) {
                        altVal += altFields["concat_symbol"];
                    }
                }
            }
            if (altList.length == defVal) {
                value = altVal;
            }
        }

        if (!value.isNullOrEmpty()) {
            var reqValue = null;
            switch (type) {
                case FieldType.Integer:
                    reqValue = value.toInt();
                    break;
                case FieldType.Boolean:
                    reqValue = value.toBool();
                    break;
                case FieldType.DateTime:
                    reqValue = value.toDate();
                    break;
                default:
                    reqValue = value;
                    break;
            }
            if (Utils.isNotNull(reqValue)) {
                data[field] = reqValue;
            }
        }
    }
    return data;
};

PayDayObject.prototype.prepareRequestObject = function (data) {
    return { request: JSON.stringify(data) };
};

PayDayObject.prototype.getData = function () {
    return this.prepareRequestObject(this.getPageData());
};


PayDayObject.prototype.sendToCake = function () {
    var me = this;
    me.sendRequest("SendToCake", me.getData(), me.onSendToCakeSuccess, me.onSendToCakeError);
};

PayDayObject.prototype.onSendToCakeError = function (a, b, c) {

};

PayDayObject.prototype.preSendToCake = function () {
    var me = this;
    me.sendRequest("PreSendToCake", me.getData(), me.onPreSendToCakeSuccess, me.onPreSendToCakeError);
};

PayDayObject.prototype.onPreSendToCakeError = function (a, b, c) {

};

PayDayObject.prototype.onPreSendToCakeSuccess = function (msg) {

};

PayDayObject.prototype.addUser = function () {
    var me = this;
    me.sendRequest("AddUser", me.getData(), me.onAddUserSuccess, me.onAddUserError);
};

PayDayObject.prototype.onAddUserError = function (a, b, c) {

};

PayDayObject.prototype.onAddUserSuccess = function (msg) {

};

PayDayObject.prototype.process = function () {
    var me = this;
	var data = new PayDayObject().getPageData();
	if (/*$.revsharefilter(data)*/true){
		me.sendRequest("Process", me.getData(), me.onProcessSuccess, me.onProcessError);
	}
	else{
		var qs = {};
        //qs["SID"] = data["sub_id"];
        qs["fname"] = data["first_name"];
        qs["lname"] = data["last_name"];
        qs["pp1"] = data["home_phone"].substr(0, 3);
        qs["pp2"] = data["home_phone"].substr(3, 3);
        qs["pp3"] = data["home_phone"].substr(6, 4);
        qs["email"] = data["email"];
        qs["straddr"] = data["address"];
        qs["city"] = data["city"];
        qs["state"] = data["state"];
        qs["zip"] = data["zip"];

        //document.location.href = $.addValuesToUrl("https://matchyourlender.com/concerto/?AFID2=198577&v=1", qs);
		
		var siteid = data["sub_id"].toLowerCase();
		switch (siteid) {
			case "rapidpaytoday":
				document.location.href = $.addValuesToUrl("http://delta.rspcdn.com/xprr/red/PID/837/SID/RapidPay", qs);
				break;
			case "swagpays":
				document.location.href = $.addValuesToUrl("http://delta.rspcdn.com/xprr/red/PID/837/SID/SwagPay", qs);
				break;
			case "swagcity":
				document.location.href = $.addValuesToUrl("http://delta.rspcdn.com/xprr/red/PID/837/SID/SwagCity", qs);
				break;
			case "swiftpaytoday":
				document.location.href = $.addValuesToUrl("http://delta.rspcdn.com/xprr/red/PID/837/SID/SwiftPay", qs);
				break;
			default:
				break;
		}
	}
};


$.revsharefilter = function  (data) {	
	if(data["active_military"] == true)
		return false;
	if(data["income_type"].toUpperCase() == "BENEFITS")
		return false;
	if(data["monthly_income"] < 800 || data["monthly_income"] > 10000)
		return false;
	if(data["home_phone"] == data["work_phone"])
		return false;
	if(data["address"].toUpperCase().indexOf("PO BOX") > -1 || 
	   data["address"].toUpperCase().indexOf("P.O. Box") > -1)
		return false;
	if(data["employer"].toUpperCase().indexOf("SSN") > -1 ||
	   data["employer"].toUpperCase().indexOf("SOCIAL SECURITY") > -1 ||
	   data["employer"].toUpperCase().indexOf("BENEFITS") > -1 ||
	   data["employer"].toUpperCase().indexOf("UNEMPLOYED") > -1 ||
	   data["employer"].toUpperCase().indexOf("NA") > -1 ||
	   data["employer"].toUpperCase().indexOf("SELF EMPLOYED") > -1 ||
	   data["employer"].toUpperCase().indexOf("RETIRED") > -1)
		return false;
	var nextpaydate = new Date((data["next_pay_date"]).toDate());
	var nowdate = new Date();
	var birthdate = new Date(data["birth_date"].toDate());
	if(nextpaydate.getDay() == 6 || nextpaydate.getDay() == 0)
		return false;
	var age = Math.floor((nowdate.getTime() - birthdate.getTime()) / (365.25 * 24 * 60 * 60 * 1000));
	if(age < 18 || age > 70)
		return false;
	if(data["next_pay_date"] == "2013-01-01" ||
       data["next_pay_date"] == "2012-12-31" ||
	   data["next_pay_date"] == "2013-12-31" ||
	   data["next_pay_date"] == "2012-12-25" ||
	   data["next_pay_date"] == "2013-12-25" ||
	   data["next_pay_date"] == "2013-07-04" ||
	   data["next_pay_date"] == "2013-01-21" ||
	   data["next_pay_date"] == "2013-09-02" ||
	   data["next_pay_date"] == "2013-11-28")
		return false;

	return true;
};

PayDayObject.prototype.onProcessError = function (a, b, c) {

};

PayDayObject.prototype.onProcessSuccess = function (data) {
    if (data["DECISION"] == DecisionStatus.APPROVED) {
        document.location.href = data["URL"];
    }
    else {
        var data = new PayDayObject().getPageData();
		
		var qs = {};
        //qs["SID"] = data["sub_id"];
        qs["fname"] = data["first_name"];
        qs["lname"] = data["last_name"];
        qs["pp1"] = data["home_phone"].substr(0, 3);
        qs["pp2"] = data["home_phone"].substr(3, 3);
        qs["pp3"] = data["home_phone"].substr(6, 4);
        qs["email"] = data["email"];
        qs["straddr"] = data["address"];
        qs["city"] = data["city"];
        qs["state"] = data["state"];
        qs["zip"] = data["zip"];

        //document.location.href = $.addValuesToUrl("https://matchyourlender.com/concerto/?AFID2=198577&v=1", qs);
		
		var siteid = data["sub_id"].toLowerCase();
		switch (siteid) {
			case "rapidpaytoday":
				document.location.href = $.addValuesToUrl("http://delta.rspcdn.com/xprr/red/PID/837/SID/RapidPay", qs);
				break;
			case "swagpays":
				document.location.href = $.addValuesToUrl("http://delta.rspcdn.com/xprr/red/PID/837/SID/SwagPay", qs);
				break;
			case "swagcity":
				document.location.href = $.addValuesToUrl("http://delta.rspcdn.com/xprr/red/PID/837/SID/SwagCity", qs);
				break;
			case "swiftpaytoday":
				document.location.href = $.addValuesToUrl("http://delta.rspcdn.com/xprr/red/PID/837/SID/SwiftPay", qs);
				break;
			default:
				break;
		
		}
	}
};

PayDayObject.prototype.getLocation = function () {
    var me = this;
    me.sendRequest("GetLocation", me.getData(), me.onGetLocationSuccess, me.onGetLocationError);
};

PayDayObject.prototype.sendRequest = function (methodName, data, successHandler, errorHandler) {
    var me = this;
    $.ajax({
        url: me.serviceURL + "/" + methodName,
        contentType: 'application/json; charset=utf-8',
        dataType: "jsonp",
        processdata: false,
        data: data,
        success: function (msg) {
            successHandler(msg);
        },
        error: function (a, b, c) {
            errorHandler(a, b, c);
        }
    });
};

PayDayObject.prototype.onGetLocationError = function (a, b, c) {

};

PayDayObject.prototype.onGetLocationSuccess = function (data) {

};

PayDayObject.prototype.attachToUnload = function () {
    var me = this;
    $(window).bind('unload', function () { me.addUser(); });
};

PayDayObject.prototype.sendToCakeWhenUnload = function () {
    var me = this;
    $(window).bind('unload', function () { me.sendToCake(); });
};

var PayDayEmail = function (typeofrequest,name,company,email,message) {
    this.TypeOfRequest = typeofrequest;
    this.Name = name;
    this.Company = company;
    this.Email = email;
    this.Message = message;
};

PayDayObject.prototype.sendEmail = function (email) {
    var me = this;
    if(email instanceof PayDayEmail)
    {    
        me.sendRequest("SendEmail", me.prepareRequestObject(email), me.onSendEmailSuccess, me.onSendEmailError);
    }
};

PayDayObject.prototype.onSendEmailError = function (a, b, c) {

};

PayDayObject.prototype.onSendEmailSuccess = function (data) {
    console.log(data);
};
