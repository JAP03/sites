PHTTP159.153.236.12"¾
;GET /v/GboATQ/include/js/fbconnect/new-baseJQ.js HTTP/1.1
Host: www.pogo.com
Connection: keep-alive
Accept: */*
vUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36
Referer: http://www.pogo.com/
$Accept-Encoding: gzip,deflate,sdch
!Accept-Language: en-US,en;q=0.8
ZCookie: prod.JID=C816F2024A6FFAFE148716AABA2FA2A6.000163; com.pogo.unid=6711753983670030

*À½
HTTP/1.1 200 OK
Age: 6282      
%Date: Wed, 15 Jan 2014 14:34:08 GMT
(Expires: Mon, 14 Jan 2019 14:34:08 GMT
#Cache-Control: max-age=157680000 
Connection: Keep-Alive
Via: POGO-EDGE
ETag: W/"23858-1378348533000"
Server: Apache-Coyote/1.1
Accept-Ranges: bytes
.Last-Modified: Thu, 05 Sep 2013 02:35:33 GMT
Content-Type: text/javascript
Content-Length: 23858
´º
//
// Copyright 2009-2010 Electronic Arts, Inc.
//

jQuery.noConflict();
/**
	* Set of helper methods to be used to interact with facebook.
	*/
var PogoFB = PogoFB || {
	/* Flag to indicate if the API was initialized. */
	_apiInitialized: false,
	
	/* Flag to indicate if the initialization after a status change has been done. */
	_statusChangeInitilized: false,
	
	/* Stores the allowed permissions on facebook */
	_allowedPermissions: '',

	populateAllowedPermissions: function(callback) {
		// FB.api is asynchronous call. Permissions will be populated long after this function exits.
		// If you need results of this function - they will be available in callback
		FB.api('/me/permissions', function(response) {
			var perms = response.data[0];
			for(var key in perms){
				if(perms[key] == 1){
					PogoFB._allowedPermissions += (key + ",");
				}
			}
			if ( typeof callback == 'function') {
				callback();
			}
		});
	},

	/**
	* Initializes the Facebook API.
	*/
	initializeFB: function() {
    	if (PogoFB._apiInitialized) {
    		return;
    	}
    	var fbroot = jQuery('#fb-root');

        if (fbroot.length==0) {
            jQuery(document.body).append("<div id='fb-root'></div>")
        }

    	FB.init({appId: PogoFBConstants.apiKey, 
    		status: true, 
    		cookie: true,
    		oauth:true, 
    		xfbml: true});
		
    	FB.Event.subscribe('auth.login', function(response) {
    		PogoFB._onStatusChange();
    		if (response.authResponse) {
					PogoFB.populateAllowedPermissions();
    		}
    	});
    	PogoFB._apiInitialized = true;
    	PogoFB._onStatusChange(false);
    	PogoFB._statusChangeInitialize();
	},

	/**
	* Array to store the functions that should be invoked on initialization.
	*/
	onInitialize: new Array(),

	/**
	* Function that calls any function stored into onInitialize array.
	*/
	_statusChangeInitialize: function() {
    	if (PogoFB._statusChangeInitilized) {
    		return;
    	}
    	for (var i = 0; i < PogoFB.onInitialize.length; i++) {
    		PogoFB.onInitialize[i]();
    	}
    	PogoFB._statusChangeInitilized = true;
	},

	/**
	* Array to store the functions that should be invoked when the status is
	* verified so that the enclosing page can adapt to the new status.
	*
	* Functions pushed onto this array can optionally take as a parameter the
	* status details (a JSON representation of
	* com.pogo.html.struts.fbconnect.FacebookConnectStatusDetails).
	*/
	onStatusValidation: new Array(),

	onConnectCallback: null,

	/**
	* Function to be called as a callback on the FB.init method call, if a user
	* is connected. This function invokes all the functions that have been pushed
	* to the onStatusValidation array.
	*/
	_onStatusChange: function(showErrorPopup) {	   
	   PogoFB._statusChangeInitialize();
	   PogoFB.Status.getStatus(function(status) {
            for (var i = 0; i < PogoFB.onStatusValidation.length; i++) {
              PogoFB.onStatusValidation[i](status);
            }
            if (status.connected && !status.newLink) {
            	if (typeof PogoFB.onConnectCallback == 'function') {
            		PogoFB.onConnectCallback();
            		PogoFB.onConnectCallback = null;
            	}
            }
	   }, showErrorPopup);
	},

	/**
	* Function that calls any function stored into onNewLinkFunctions array.
	*/
	onNewLink: function() {
    	if (typeof PogoFB.onConnectCallback == 'function') {
    		PogoFB.onConnectCallback();
    		PogoFB.onConnectCallback = null;
    	}
	},

	getAllowedPermissions: function() {
	   return _allowedPermissions;
	},

	hasPermission: function(permission, callback) {
    	var list = PogoFB._allowedPermissions.split(',');
    	for(var i=0, size=list.length; i<size; i++) {
    		if (list[i] == permission) {
    			if (callback) {
    				callback();
    			}
    			return true;
    		}
    	}
    	return false;
	},

	/**
	* Method to request the current user to login. This method assumes that it
	* is not invoked if the current pogo user and facebook user are already
	* linked.
	*/
    login: function(alreadyPrompted) {
        if (window.ie6) {
            PogoFB.Popover.show('/fbconnect/upgradebrowser.do');
        } else {
            var callback = function(response) {
                if (response.authResponse) {
									PogoFB.populateAllowedPermissions(function() {PogoFB._Link.createLink();});
                }
            };
            if (alreadyPrompted=='undefined' || !alreadyPrompted) {
                FB.login(callback, {scope:'publish_stream'} );
            } else {
                FB.getLoginStatus(callback);
            }
        }
    },

	/**
	* Function that calls FB API to show FB authentication popup.
	*/
	requireSession: function() {
    	PogoFB.login();
	},

	/**
	* Method that logs out per request the current facebook user and asks the
	* user to log back in to facebook (with a different user).
	*/
	logout: function() {
    	FB.logout(function() {
    		PogoFB.requireSession();
    	});
	},

	saveSettings: function(settingsForm) {
    	var url = "/fbconnect/settings/save.do?facebookProfileVisible=" + settingsForm.elements['facebookProfileVisible'].checked;
    	jQuery.ajax({
    	   'url': url,
    	   dataType: 'text',
    	   success: function(responseText){},
    	   error: function(jqXHR, textStatus, errorThrown){
    	       PogoFB.Error.showServerErrorPopUp;
    	   }   
    	});
	},

	checkAutopublishPermission: function (callbackOnSuccess,callbackOnFail,callback) {
		// first check for the killswitch
		if (!PogoFBConstants.autoshareEnabled) {
			if ( typeof callbackOnFail =='function') {
				callbackOnFail();
			}
			return;
		} else {
			FB.login(function(response) {
				if (response.authResponse) {
						PogoFB.populateAllowedPermissions(function() {
    					if (PogoFB.hasPermission('publish_stream')) {
    						if ( typeof callbackOnSuccess == 'function') {
    							if(typeof callback == 'function'){
    								callbackOnSuccess(callback);
    							} else {
    								callbackOnSuccess();
    							}
    						}
    					} else {
    						if ( typeof callbackOnFail == 'function') {
    							callbackOnFail();
    						}
    					}
						});
				}
			}, {scope:'publish_stream'});
		}
	},
		
	hasAutopublishPermission: function (callbackOnSuccess,callbackOnFail) {
    	// first check for the killswitch
    	if (!PogoFBConstants.autoshareEnabled) {
    		if ( typeof callbackOnFail =='function') {
    			callbackOnFail();
    		}
    		return;
    	}
    	else {
    		var hasPerm = PogoFB.hasPermission('publish_stream');
    		if (hasPerm) {
    			if ( typeof callbackOnSuccess == 'function') {
    				callbackOnSuccess();
    				}
    		} else {
    			if ( typeof callbackOnFail == 'function') {
    				callbackOnFail();
    				}
    		}
    	}
	},
	
	/**
	* Wrapper that ensures that the given callback will be invoked if and only
	* if the user has connected, and prompts the user to connect if he hasn't.
	*/
	requireConnected: function(callback, connectRequestedTag) {
    	PogoFB.Status.getStatus(function (status) {
    		if (status.connected) {
    		  callback();
    		} else {
        		PogoFB.onConnectCallback = callback;
        		if (!status.isPogoUserLinked) {
        			if (connectRequestedTag) {
        			 PogoFB.Utils.omnitureTagging(connectRequestedTag);
        			}
    		    }
    		    PogoFB.login();
    		}
    	});
	},

	/**
	* Wrapper that ensures that the given callback will be invoked if and only
	* if the user has the required permission or grants it upon the request.
	* 
	* FIXME - used by publish mini - need to refactor to work with new API
	* (get response.perms on login and resync it with a login listener)
	*/
	requirePermission: function(permission, callback, page) {
		var hasPerm = PogoFB.hasPermission(permission);
		if (hasPerm) {
		// user already has permission
    		if ( typeof callback =='function') {
    			callback();
    		}
    		} else {
    			// track init autopublish grant
    			PogoFB.Utils.omnitureTagging(PogoFB._getInitPermissionOmnitureTag(page));
    			FB.login(function(response) {
        			if (response.authResponse) {
								PogoFB.populateAllowedPermissions(function() {
									if (PogoFB.hasPermission(permission)){
										PogoFB.Utils.omnitureTagging(PogoFB._getConfirmedPermissionOmnitureTag(page));
										callback();
									} else {
										PogoFB.Utils.omnitureTagging(PogoFB._getRejectedPermissionOmnitureTag(page));
									}
								});
        			}
    			}, {scope: permission});
    		}
	},

	_getInitPermissionOmnitureTag: function(publishType) {
		if (publishType == 'popup') {
			 return PogoFBConstants.Messages.popupSettingsInitAutopublish;
			} else {
			 return PogoFBConstants.Messages.defaultSettingsInitAutopublish; 
			}
	},

	_getConfirmedPermissionOmnitureTag: function(publishType) {
		if (publishType == 'popup') {
		  return PogoFBConstants.Messages.popupSettingsDoAutopublish;
		} else {
		  return PogoFBConstants.Messages.defaultSettingsDoAutopublish; 
		}
	},
	_getRejectedPermissionOmnitureTag: function(publishType) {
        if (publishType == 'popup') {
		  return PogoFBConstants.Messages.popupSettingsRejectAutopublish;
		} else {
		  return PogoFBConstants.Messages.defaultSettingsRejectAutopublish; 
		}
	},
	/**
	* Wrapper that removes the autopublish permission.
	*/
	removeAutoPublishPermission: function(callbackIfSuccess, callbackIfFail) {        
        jQuery.ajax({
            url: "/fbconnect/removeextperm.do",
            dataType: 'text',
            success: function(responseText){
                    PogoFB.Utils.omnitureTagging(PogoFBConstants.Messages.settingsRemoveAutopublish);
                    callbackIfSuccess();
                    // removing permissions from javascript cache
                    var hasPerm = PogoFB.hasPermission('publish_stream');
                    if (hasPerm) {
                        PogoFB._allowedPermissions = PogoFB._allowedPermissions.replace('publish_stream','');
                    }
                },
             error: function(){
                if (typeof callbackIfFail =='function') {
                    callbackIfFail();
                } else {
                    PogoFB.Error.showServerErrorPopUp();
                }
              }   
            });    		
	},
	
	/**
	* Method to remove the link between the facebook and pogo user. It shows a 
	* confirmation popover and if the user confirms the link is removed.
	*
	* TODO(cdolan): Figure out how to make this look more elegant.
	*/
	removeLink: function(omnitureMessage) {
    	var onclickFunctions = "PogoFB.Popover.close(this);PogoFB._Link.remove();"
    	if (omnitureMessage) {
    		onclickFunctions = "PogoFB.Utils.omnitureTagging('" + omnitureMessage + "'); " + onclickFunctions;
    	}
	
    	PogoFB.Popover.showContent(
    		'<div id="mdBox">'
    		+ '<div class="hdr">'
    		+   '<img src="/img/fbconnect/popover/hd-lt-cnr.gif" class="inl" />'
    		+   '<h3 class="inl">'
    		+   PogoFBConstants.Messages.removeLinkConfirmTitle
    		+   '</h3>'
    		+   '<img src="/img/fbconnect/popover/hd-rt-cnr.gif" class="inl-r" />'
    		+   '<div class="clear"></div>'
    		+ '</div>'
    		+ '<div class="withfblogo">'
    		+    '<img src="/img/fbconnect/facebook-logo.gif" class="inl firstBtn" />'
    		+    '<div class="desc inl">'
    		+      PogoFBConstants.Messages.removeLinkConfirmMessage
    		+    '</div>'
    		+    '<div class="clear"></div>'
    		+  '</div>'
    		+  '<div class="ftr">'
    		+    '<a href="javascript:void(0);" onclick="' + onclickFunctions + '">'
    		+      PogoFBConstants.Images.disconnectButton
    		+    '</a>'
    		+    '<a href="javascript:void(0);" onclick="PogoFB.Popover.close(this)">'
    		+      PogoFBConstants.Images.cancelButton
    		+    '</a>'
    		+  '</div>'
    		+  '</div>', false);
    }
};

/**
* Helper methods to handle the status of the current user. This is done this
* way to allow reusing the recently looked up status, rather than making
* multiple ajax calls.
*/
PogoFB.Status = {
	   _currentStatus: null,

	   _currentShareStatus: null,

    	/**
    	* Invokes the callback with the _currentStatus. If none has been set as
    	* current, it invokes an action to get the current one.
    	*/
    	getStatus: function(callback, showErrorPopup) {
        	var shouldShowError = typeof showErrorPopup == 'undefined' || showErrorPopup;        
            jQuery.ajax({
                url: '/fbconnect/getstatus.do',
                dataType: 'text',
                success: function(responseText){
                    PogoFB.Status._currentStatus = eval(responseText);                    
                    callback(PogoFB.Status._currentStatus);                    
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    if (shouldShowError) {
                        PogoFB.Error.showServerErrorPopUp();
                    }
                }     
            });	        	
	   },

    	/**
    	* Invokes the callback with the _currentStatus. If none has been set as
    	* current, it invokes an action to get the current one.
    	*/
    	getShareStatus: function(callback, showErrorPopup) {
        	var shouldShowError = typeof showErrorPopup == 'undefined' || showErrorPopup;        
            jQuery.ajax({
                url: "/fbconnect/getsharestatus.do",
                dataType: 'text',
                success: function(responseText){
                    PogoFB.Status._currentShareStatus = eval(responseText);
                    callback(PogoFB.Status._currentShareStatus);
                },
                error: function() {
                    if (shouldShowError) {
                        PogoFB.Error.showServerErrorPopUp();
                    }
                }
            });	
    	},
	
    	/**
    	* Updates the current status object.
    	*/
    	updateCurrentStatus: function(status) {
    	   PogoFB.Status._currentStatus = status;
    	}
};

/**
 * Handler for error messages.
 */
PogoFB.Error = {

	/**
	* Generic error messaage shown within a popup. Hardcoded to be used as a
	* generic error popup.
	*
	* TODO(cdolan): Figure out how to make this look more elegant.
	*/
	showServerErrorPopUp: function() {
    	PogoFB.Popover.showContent(
    		'<div id="mdBox">'
    		+ '<div class="hdr">'
    		+   '<img src="/img/fbconnect/popover/hd-lt-cnr.gif" class="inl" />'
    		+   '<h3 class="inl">'
    		+   PogoFBConstants.Messages.errorInternalTitle
    		+   '</h3>'
    		+   '<img src="/img/fbconnect/popover/hd-rt-cnr.gif" class="inl-r" />'
    		+   '<div class="clear"></div>'
    		+ '</div>'
    		+ '<div class="withfblogo">'
    		+    '<img src="/img/fbconnect/facebook-logo.gif" class="inl firstBtn" />'
    		+    '<div class="desc inl">'
    		+      PogoFBConstants.Messages.errorFatalAjaxProblem
    		+    '</div>'
    		+    '<div class="clear"></div>'
    		+  '</div>'
    		+  '<div class="ftr">'
    		+    '<a href="javascript:void(0)" onclick="if(typeof parentCallback == \'function\'){parentCallback(false);}PogoFB.Popover.close(this);">'
    		+      PogoFBConstants.Images.cancelButton
    		+    '</a>'
    		+  '</div>'
    		+  '</div>', true);
    }
};

	
/**
* Set of methods associated to user linkage.
*/
PogoFB._Link = {

	/**
	* Attempts to create a link between the current pogo user and the facebook
	* user (if none login, requires a login). This method assumes that it is not
	* invoked if the current pogo user and facebook user are already linked.
	*/
	createLink: function(fbstatus) {
    	if (fbstatus == null) {
        		FB.getLoginStatus( function(response) {
        		fbstatus = response;
    		});
    	}

    	if (fbstatus.authResponse) { // same as: fbstatus.status == "connected") {
    		PogoFB.Status.getStatus(function(status) {
    			// three conditions may occur here:
    			// - the pogo user has a link and he's attempting to log in with
    			//   another facebook user which means we must show the users
    			//   mismatch error
    			// - the current fb user is linked to someone else, and the current
    			//   pogo user is trying to create a link to him; in this case we
    			//   must show the already connected error
    			// - the current fb user has granted the app but the link was
    			//   removed (though not the grant), therefore the user is free to
    			//   be linked, we try to go through the linking process
    			if (status.connected) {
    				if (!PogoFB.Status._currentShareStatus
        					|| PogoFB.Status._currentShareStatus.connected != status.connected) {
        					PogoFB.Status._currentShareStatus = status;
        					PogoFB._Link.callLinkAction();
        			}
    			} else if (status.isPogoUserLinked) {
    				PogoFB.Popover.show('/fbconnect/error/usersmismatch.do');
    			} else if (status.isFbUserLinked) {
    				PogoFB.Popover.show('/fbconnect/error/alreadyconnected.do');
    			} else {
    				PogoFB._Link.callLinkAction();
    			}
    		});
    	} 
	},

	/**
	* Effectively invokes the action that creates the link between the two users.
	*/
	callLinkAction: function() {
        jQuery.ajax({
            url: "/fbconnect/link.do",
            dataType: 'text',
            success: function(responseText){
                var status = eval(responseText);
    
                // status may have changed, so we have to update it
                PogoFB.Status.updateCurrentStatus(status);
    
                if (!status.connected && status.isPogoUserLinked) {
                //PogoFB.Popover.show('/fbconnect/error/usersmismatch.do');
                alert("user missmatch");
                } else if (!status.connected && status.isFbUserLinked) {
                //PogoFB.Popover.show('/fbconnect/error/alreadyconnected.do');
                alert("user already connected");
                }
    
                PogoFB._onStatusChange();
    
                // if it is a new link, we must show the settings dialog
                //if it is a new link then trigger a new omniture event to track
                //event10 == FACEBOOK_ACCT_LINK
                if (status.newLink) {
                    if (typeof OmnitureEvent == 'function') {
                    OmnitureEvent(s.pageName, 'event10');
                    }
                    PogoFB.Utils.openInviteFriendsPopUp();
                }
            },
            error: function(response) {
                //FIXME PogoFB.Error.showServerErrorPopUp
                alert("FAILED to request /fbconnect/link.do");
            }           
        });
	},

	/**
	* Action that removes the link between the current facebook and pogo user.
	*/
	remove: function() {
        jQuery.ajax({
            url: "/fbconnect/removelink.do",
            dataType: 'text',
            success: function(responseText){
                window.location = responseText;
            },
            error: function(){
                PogoFB.Error.showServerErrorPopUp;
            }
        });
	}
};

PogoFB.Popover = {
	show: function(url) {
        jQuery.ajax({
            'url': url,
            dataType: 'text',
            success: function(responseText){
                PogoFB.Popover.showContent(responseText, false);
            },
            error: function(){
                PogoFB.Error.showServerErrorPopUp;
            }
            //check what evalScripts:true translates to
        });
	},
	showContent: function(innerHTML, forceClose) {
		if(typeof parentCallback == 'function'){parentCallback(true);}		
        if(forceClose){
            //Do we remove the connect-popup div
        }
        if(jQuery('#fb-root #connect-popup').length==0){
            jQuery('#fb-root').append(jQuery('<div id="connect-popup" style="z-index: 16177285; position: absolute; top: 50%;  left: 50%;  margin: -183px 0 0 -270px;"></div>'));
        }
        jQuery('#fb-root #connect-popup').html(innerHTML);
        jQuery('#fb-root #connect-popup').show();        		
	},
	close: function(element) {
		if(typeof parentCallback == 'function'){parentCallback(false);}
       //hiding the div for now
       jQuery('#fb-root #connect-popup').hide();         
	}
};

/**
	* Set of utility methods.
	*/
PogoFB.Utils = {
	
	/**
		* Method that returns the html to be used to display the login button,
		* instead of Facebook's standard fbml tag. 
		*/
	getLoginButtonHtml: function(id, msg,size) {
		var sizeStr = "";
		if (size) {
			sizeStr='size="' + size + '"';
		}
		var htmlString = 
			'<div id="' + id +'"> <fb:login-button scope="publish_stream" v="2" '+ sizeStr +' onlogin="PogoFB.login(true);" > '+
				msg + 
			'</fb:login-button> </div>';
		return htmlString;
	},

	/**
		* Adds the omniture tagging to the given element's onclick event.
		*/ 
	tagOnClick: function(elementId, message) {
		//Needs to be revisit all the references. The references have to just pass the id
        jQuery('#'+elementId).click(function(event){
            PogoFB.Utils.omnitureTagging(message);
        });
	},
	
	_addSourceId: function(url, tag) {
		return PogoFB.Utils._addParam(url,'sourceid',tag);
	},

	_addParam: function(url, param, value) {
		if (url.indexOf('?') < 0) {
		    return url + '?' + param + '=' + value;
		} else {
		    return url + '&' + param + '=' + value;
		}
	},
	
	/**
		* Sets the omniture tagging for a custom action.
		*
		* Preconditions: omniture s_gi function must be declared in the page that calls this utility class.
		*/ 
	omnitureTagging: function(message, events) {
		if (events) {
		    if (typeof OmnitureEvent == 'function') {
		        OmnitureEvent(message, events);
		    }
		} else {
		    if(typeof OmnitureCustomLink == 'function') {
                OmnitureCustomLink(message);
            }
		}
	}, 

	/**
		* Returns the link with the standard 'What's this' message, that opens the
		* FAQ as a popover.
		*/
	getFaqLink: function() {
		var htmlString = 
			'<a href="javascript:void(0)" onclick="var win = window.open(\'/fbconnect/faq.do\', \'PogoFbHelp\', \'width=600,height=460,location=no,resizable=yes,toolbar=no,scrollbars=yes\');if (win) win.focus();" >'
			+ PogoFBConstants.Messages.commonWhatIsThis
			+ '</a>';
		return htmlString;
	},
	
    openInviteFriendsPopUp: function() {

    },

    showFBFrame: function() {
        FB.Event.subscribe('auth.authResponseChange', function(response) {
            if (response.status === 'connected') {
                FB.api('/me', function(response) {
                    jQuery("#reg_facebook_right_username").html(response.name);
                    jQuery("#reg_facebook_left_username").attr("src","https://graph.facebook.com/" + response.id + "/picture");
                    jQuery('#regForm').attr("action", "/action/fbconnect/dologin.do");
                    jQuery(".reg_facebook").slideDown();
                });
            }
        });
    },

    fb_logout: function() {
        FB.logout(function(response) {
            jQuery("#mdBox").hide();
            jQuery(".reg_facebook").slideUp();
            window.location.href = "/action/pogo/signin.do"
        });
    },

	/**
		* Parses the DOM tree to reflect Facebook XFBML dynamic changes and
		* after all elements are ready it executes the callback function.
		*/
	parseDom: function(callback) {
		FB.XFBML.parse();
		callback();
	}
};

/**
	* Formats a message following java's MessageFormat behavior.
	*/
var MsgFormat = MsgFormat || {
	format: function(s) {
    	var i = 1;
    	while (i < arguments.length) {
    		s = s.replace("{" + (i-1) + "}", arguments[i++]);
    	}
    	return s;
	}
};

/**
	* Add an event so that the Facebook Api is initialized as soon as the DOM is
	* ready.
	*/
if (PogoFBConstants.facebookEnabled) {
    jQuery(document).ready( function() {
        PogoFB.initializeFB();
    });
}
